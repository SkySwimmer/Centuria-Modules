buildscript {
	repositories {
		mavenCentral()
		maven {
			name = "AerialWorks"; url = "https://aerialworks.ddns.net/maven"
		}
	}
	dependencies {
		classpath 'org.asf.cyan.cornflower:Cornflower:1.0.0.A30'
	}
}

plugins {
	id 'java'
	id 'maven-publish'
}


// Basic information
version = "1.0.0.A1"
group = "org.asf.emuferal"

ext.modulePackage = "org.asf.emuferal.peertopeer"
ext.moduleClass = "PeerToPeerModule"
ext.authorname = "AerialWorks Software Foundation"

// Internal
apply plugin: 'eclipse'
apply plugin: 'org.asf.cyan.cornflower'

Calendar cal = new GregorianCalendar();
cal.setTime(new Date());
ext.buildyear = cal.get(Calendar.YEAR).toString();

repositories {
	mavenCentral()
	maven { name = "AerialWorks"; url = "https://aerialworks.ddns.net/maven" }
	flatDir {
		dirs 'libraries'
	}
}

jar {
	manifest {
		attributes([
			"Specification-Title": project.name,
			"Specification-Vendor": "${authorname}",
			"Specification-Version": project.version,
			"Implementation-Title": project.name,
			"Implementation-Version": project.version,
			"Implementation-Vendor" :"${authorname}",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
	includeEmptyDirs = false
}

dependencies {
	testImplementation group: 'junit', name: 'junit', version: '4.13.2'

	implementation name: "Centuria"
	implementation name: "ConnectiveHTTP"
	implementation name: "RatsMemory"
	implementation name: "HttpBasicFileModule"
	
	implementation group: 'org.asf.cyan', name: 'CyanComponents', version: '1.0.0.A8'
	implementation group: 'org.asf.cyan', name: 'CyanUtil', version: '1.0.0.A19'
	implementation group: 'org.asf.cyan', name: 'CCFG', version: '1.0.0.A17'
	implementation group: 'org.asf.cyan', name: 'Fluid', version: '1.0.0.A27'
	
	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.0'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.0'
	
	implementation 'org.ow2.asm:asm:9.1'
	implementation 'org.ow2.asm:asm-tree:9.1'
	implementation 'org.ow2.asm:asm-commons:9.1'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.0'
	implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.13.3'
	
	implementation group: 'javax.activation', name: 'activation', version: '1.1.1'
	
	implementation group: 'org.asf.aos.util.service', name: 'aosutil-service-SLIB-UTIL', version: '0.0.0.12'
	implementation group: 'org.apache.commons', name: 'commons-compress', version: '1.21'	
	implementation group: 'org.tukaani', name: 'xz', version: '1.9'
	implementation group: 'org.joml', name: 'joml', version: '1.10.4'
	
	implementation group: 'org.reflections', name: 'reflections', version: '0.10.2'
	testImplementation group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.36'
	
	implementation group: 'net.objecthunter', name: 'exp4j', version: '0.4.8'
}

createEclipseLaunches {
	name "Launch Centuria Server (${project.name})"

	// Main server
	mainClass "org.asf.centuria.Centuria"
	workingDir "server"

	// Enable debug mode
	jvm "-DdebugMode=true"

	// Make sure the module is loaded into the server
	jvm "-DaddCpModules=${modulePackage}.${moduleClass}"

	// Server dependencies
	classpath project // current project
	classpath {
		// libraries
		for (File file : new File("libraries").listFiles()) {
			archive file
		}

		// server libraries
		for (File file : new File("server/libs").listFiles()) {
			archive file
		}
		archive new File("server/Centuria.jar") // server jars
	}

	// Server source lookup
	sourceLookup {
		// libraries
		for (File file : new File("libraries").listFiles()) {
			archive file
		}

		// server libraries
		for (File file : new File("server/libs").listFiles()) {
			archive file
		}
		archive new File("server/Centuria.jar") // server jars
	}
}
createEclipseLaunches.dependsOn 'eclipse'

task moduledata () {
	doLast {
		for (ResolvedArtifact arti : project.configurations.implementation.resolvedConfiguration.getResolvedArtifacts()) {
			if (arti.getClassifier() != null)
				continue;
				
		    String outFileNm = arti.name + (arti.getClassifier() != null && !arti.getClassifier().isEmpty() ? "-" + arti.getClassifier() : "")
		    if (outFileNm.equals("Centuria"))
		    	continue;
			copy {			    
				from arti.file
				rename arti.file.getName(), outFileNm + "." + arti.getExtension()
				into "build/moduledata/libs"
			}
		}
		for (def task : project.tasks) {
			if (task instanceof AbstractArchiveTask) {
				if (!task.getArchiveClassifier().get().isEmpty())
					continue;
					
				copy {
					from task.getArchiveFile().get()
					rename task.getArchiveFile().get().getAsFile().getName(), task.getArchiveBaseName().get() + (task.getArchiveClassifier().get() != null && !task.getArchiveClassifier().get().isEmpty() ? "-" + task.getArchiveClassifier().get() : "") + "." + task.getArchiveExtension().get()
					into "build/moduledata/modules"
				}
			}
		}
	}
}

moduledata.dependsOn project.tasks.build
build.finalizedBy moduledata
